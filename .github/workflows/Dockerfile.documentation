# Example usage
#
# docker build --build-arg DEVELOPER_BUILD=ON \
#        -t open3d-documentation-ci:latest \
#        -f .github/workflows/Dockerfile.documentation .

FROM ubuntu:20.04

# Set to ON for regular builds, OFF for release builds.
ARG DEVELOPER_BUILD=ON
# Prevent interactive inputs when installing packages.
ARG DEBIAN_FRONTEND=noninteractive
# Using bash as default shell since most of our CI scripts are in bash.
SHELL ["/bin/bash", "-c"]

# Python
ARG PIP_VER=21.1.1
ARG WHEEL_VER=0.35.1
ARG YAPF_VER=0.30.0
ARG SPHINX_VER=3.5.4
ARG SPHINX_RTD_VER=0.5.1
ARG NBSPHINX_VER=0.8.3
ARG MATPLOTLIB_VER=3.3.3
ARG M2R2_VER=0.2.7
ARG CMAKE_VER=cmake-3.19.7-Linux-x86_64

# Basic dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    wget \
 && rm -rf /var/lib/apt/lists/*

# CMake
# PWD is /, camke will be installed to /root/${CMAKE_VER}/bin/cmake
RUN CMAKE_VER_NUMBERS=$(echo "${CMAKE_VER}" | cut -d"-" -f2) \
 && wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER_NUMBERS}/${CMAKE_VER}.tar.gz \
 && tar -xf ${CMAKE_VER}.tar.gz \
 && cp -ar ${CMAKE_VER} ${HOME}
ENV PATH=${HOME}/${CMAKE_VER}/bin:${PATH}

# Open3D dependencies
# See: util/install_deps_ubuntu.sh
RUN apt-get update && apt-get install -y \
    xorg-dev  \
    libglu1-mesa-dev \
    python3-dev \
    libsdl2-dev \
    libc++-7-dev \
    libc++abi-7-dev \
    ninja-build \
    libxi-dev \
    libtbb-dev \
    libosmesa6-dev \
    libudev-dev \
    autoconf \
    libtool \
 && rm -rf /var/lib/apt/lists/*

# Open3D docs dependencies
RUN apt-get update && apt-get install -y \
    doxygen \
    texlive \
    texlive-latex-extra \
    ghostscript \
    pandoc \
 && rm -rf /var/lib/apt/lists/*

# Install miniconda
ENV PATH="/root/miniconda3/bin:${PATH}"
RUN wget \
    https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
 && bash Miniconda3-latest-Linux-x86_64.sh -b \
 && rm Miniconda3-latest-Linux-x86_64.sh \
 && conda --version

# Activate open3d env
ENV PATH="/root/miniconda3/envs/open3d/bin:${PATH}"
RUN conda create -y -n open3d python=3.6 \
 && source activate open3d \
 && which python \
 && python --version

# Docs dependencies
RUN pip install -U \
    wheel==${WHEEL_VER} \
    pip==${PIP_VER} \
    matplotlib==${MATPLOTLIB_VER} \
    sphinx==${SPHINX_VER} \
    sphinx-rtd-theme==${SPHINX_RTD_VER} \
    nbsphinx==${NBSPHINX_VER} \
    m2r2==${M2R2_VER} \
    yapf==${YAPF_VER}

# Checkout Open3D-ML master branch.
# We may add support for local Open3D-ML repo in the future.
ENV OPEN3D_ML_ROOT=/root/Open3D-ML
RUN git clone --recursive https://github.com/intel-isl/Open3D-ML.git ${OPEN3D_ML_ROOT} \
 && pip install -r "${OPEN3D_ML_ROOT}/requirements.txt" \
 && pip install -r "${OPEN3D_ML_ROOT}/requirements-torch.txt" \
 && pip install -r "${OPEN3D_ML_ROOT}/requirements-tensorflow.txt"

# Copy Open3D repo
# `docker build` should be executed from the Open3D root dir.
COPY . /root/Open3D
WORKDIR /root/Open3D
RUN mkdir build

# Common CMake options
RUN if [ "$DEVELOPER_BUILD" != "OFF" ]; \
    then export DOC_ARGS=""; \
    else export DOC_ARGS="--is_release"; \
    fi
ENV cmake_options="-DDEVELOPER_BUILD=${DEVELOPER_BUILD} \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_JUPYTER_EXTENSION=ON \
    -DWITH_OPENMP=ON \
    -DBUILD_AZURE_KINECT=ON \
    -DBUILD_LIBREALSENSE=ON \
    -DBUILD_TENSORFLOW_OPS=ON \
    -DBUILD_PYTORCH_OPS=ON \
    -DBUILD_RPC_INTERFACE=ON \
    -DBUNDLE_OPEN3D_ML=ON"

# Build Open3D with GUI truned off
WORKDIR /root/Open3D/build
RUN cmake "${cmake_options}" \
    -DENABLE_HEADLESS_RENDERING=ON \
    -DBUILD_GUI=OFF \
    .. \
 && make -j$(nproc) \
 && make install-pip-package -j$(nproc) \
 && bin/GLInfo \
 && python -c "from open3d import *; import open3d; print(open3d)"
WORKDIR /root/Open3D/docs
RUN python make_docs.py $DOC_ARGS --clean_notebooks --execute_notebooks=always --pyapi_rst=never \
 && python -m pip uninstall --yes open3d

# Build Open3D with GUI truned on
WORKDIR /root/Open3D/build
RUN cmake "${cmake_options}" \
    -DENABLE_HEADLESS_RENDERING=OFF \
    -DBUILD_GUI=ON \
    .. \
 && make -j$(nproc) \
 && make install-pip-package -j$(nproc) \
 && bin/GLInfo || echo "Expect failure since HEADLESS_RENDERING=OFF" \
 && python -c "from open3d import *; import open3d; print(open3d)"
WORKDIR /root/Open3D/docs
RUN python make_docs.py $DOC_ARGS --pyapi_rst=always --execute_notebooks=never --sphinx --doxygen
